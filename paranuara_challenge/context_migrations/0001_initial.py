# Generated by Django 2.0.6 on 2018-06-22 09:03
import swapper
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_common.mixins
import django_context.featured.models
import django_context.following.models
import django_context.mixins
import django_context.utils
import django_extensions.db.fields
import django_proximity_roles.models
import markupfield.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        swapper.dependency('core', 'Channel'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
        ('sites', '0003_set_site_domain_and_name'),
    ]

    operations = [

        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('active', 'Active'), ('closed', 'Closed'), ('inactive', 'Inactive')], default='active', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('type', models.CharField(choices=[], db_index=True, max_length=255)),
                ('created', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False)),
                ('title', models.CharField(max_length=80)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=models.CharField(max_length=80))),
                ('is_public', models.BooleanField(choices=[(True, 'Public'), (False, 'Private')], default=True)),
                ('made_public_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('made_private_date', models.DateTimeField(blank=True, null=True)),
                ('role_schema', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('buoyancy', models.PositiveIntegerField(db_index=True, default=0, help_text='Elevation of the Context through engagement.')),
                ('content', markupfield.fields.MarkupField(blank=True, null=True, rendered_field=True, verbose_name='Content (accepts Markdown)')),
                ('content_markup_type', models.CharField(choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown'), ('restructuredtext', 'Restructured Text')], default='markdown', max_length=30)),
                ('show_banner', models.BooleanField(default=False, help_text='Whether the context comes with a full-height image banner')),
                ('_content_rendered', models.TextField(editable=False, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('_tracking', django.contrib.postgres.fields.jsonb.JSONField(db_index=True, default=dict)),
                ('aim', models.CharField(blank=True, help_text='Maximum 160 Characters', max_length=160, null=True)),
                ('summary', markupfield.fields.MarkupField(blank=True, null=True, rendered_field=True, verbose_name='Content (accepts Markdown)')),
                ('summary_markup_type', models.CharField(choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown'), ('restructuredtext', 'Restructured Text')], default='markdown', max_length=30)),
                ('image', models.ImageField(default='defaults/project-image.jpg', max_length=255, upload_to=django_context.utils.get_upload_path)),
                ('_summary_rendered', models.TextField(editable=False, null=True)),
                ('icon', models.ImageField(default='defaults/project-icon.jpg', max_length=255, upload_to=django_context.utils.get_upload_path)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=swapper.get_model_name('contexts', 'Channel'))),
                ('organisation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=swapper.get_model_name('contexts', 'Organisation'))),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='contexts.Project')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_common.mixins.TranslateTypeMixin, django_context.mixins.TypedModelsContextMixin, django_context.featured.models.FeaturedMixin, django_context.following.models.FollowingMixin, models.Model, django_proximity_roles.models.ContextRolesMixin),
        ),
        migrations.CreateModel(
            name='ProjectClosure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('depth', models.IntegerField()),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projectclosure_parents', to='contexts.Project')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projectclosure_children', to='contexts.Project')),
            ],
            options={
                'db_table': 'contexts_projectclosure',
            },
        ),
        migrations.CreateModel(
            name='ProjectSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_identity', models.PositiveSmallIntegerField(choices=[(0, 'Anonymous'), (1, 'Name'), (2, 'Nickname'), (3, 'Hidden'), (4, 'Revealed')], default=3, help_text='Determines to what level users identity is revealed in the project')),
                ('irrelevance_threshold', models.SmallIntegerField(default=-4, help_text='Number that determines when negatively buoyant posts disappear.')),
                ('elevation_threshold', models.SmallIntegerField(default=2, help_text='Number that determines when negatively buoyant posts disappear.')),
                ('allow_hide_forum', models.BooleanField(default=False)),
                ('allow_resources', models.BooleanField(default=False)),
                ('allow_owner_polls', models.BooleanField(default=False)),
                ('allow_multi_poll_groups', models.BooleanField(default=False)),
                ('allow_anonymous_posting', models.BooleanField(default=False)),
                ('allow_public_posting', models.BooleanField(default=False)),
                ('allow_anonymous_voting', models.BooleanField(default=False)),
                ('allow_public_voting', models.BooleanField(default=False)),
                ('launch_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date the project becomes active')),
                ('close_activity_date', models.DateTimeField(default=django_context.utils.close_activity_date, help_text='Date the discussion closes')),
                ('close_voting_date', models.DateTimeField(default=django_context.utils.close_voting_date, help_text='Date the voting in polls closes')),
                ('results_live_date', models.DateTimeField(default=django_context.utils.results_live_date, help_text='Date the voting in polls closes')),
                ('timed_project', models.BooleanField(default=False)),
                ('persistent_discussion', models.BooleanField(default=False, help_text='Whether the discussion remains active outside of the discussion phase')),
                ('persistent_voting', models.BooleanField(default=False, help_text='Whether the voting remains active outside of the polling phase')),
                ('min_required_options', models.PositiveSmallIntegerField(default=2, help_text='The minimum required options for the Project Premise.')),
                ('max_allowed_options', models.PositiveSmallIntegerField(default=2, help_text='The maximum number of options allowed in the project.')),
                ('require_premise', models.BooleanField(default=False)),
                ('allow_premise', models.BooleanField(default=False)),
                ('allow_sub_projects', models.BooleanField(default=False)),
                ('allow_campaigns', models.BooleanField(default=False)),
                ('allow_petitions', models.BooleanField(default=False)),
                ('allow_surveys', models.BooleanField(default=False)),
                ('allow_challenges', models.BooleanField(default=False)),
                ('allow_policies', models.BooleanField(default=False)),
                ('allow_rewards', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Project Settings',
                'verbose_name_plural': 'Project Settings',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlugHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='Tracked Models ID')),
                ('old_slug', models.SlugField(help_text='The old slug that would return a 404', max_length=55)),
                ('new_slug', models.SlugField(help_text='The new slug', max_length=55)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='settings',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=swapper.get_model_name('contexts', 'ProjectSettings')),
        ),
        migrations.AlterUniqueTogether(
            name='projectclosure',
            unique_together={('parent', 'child')},
        ),
    ]
