# Generated by Django 2.2.4 on 2019-08-04 08:42

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('classification', models.CharField(choices=[('f', 'Fruit'), ('v', 'Vegetable'), ('a', 'Animal'), ('x', 'Unknown')], default='x', max_length=1)),
                ('name', models.CharField(max_length=55, unique=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('guid', models.UUIDField(default=uuid.uuid4)),
                ('_id', models.CharField(help_text='External System ID', max_length=24)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('_friend_cache', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='Storage for friend ids if related friend has not been created yet')),
                ('address', models.TextField(blank=True, max_length=255)),
                ('registered', models.DateTimeField(default=django.utils.timezone.now)),
                ('gender', models.CharField(choices=[('unknown', 'Unknown'), ('male', 'Male'), ('female', 'Female'), ('non_binary', 'Non Binary')], default='unknown', max_length=12)),
                ('age', models.PositiveSmallIntegerField(blank=True)),
                ('picture', models.CharField(blank=True, help_text='URL for picture', max_length=255)),
                ('greeting', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('eye_color', models.CharField(blank=True, max_length=15)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('has_died', models.BooleanField(default=False)),
                ('about', models.TextField(blank=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employees', to='paranuara.Company')),
                ('food', models.ManyToManyField(blank=True, help_text='Favourite Foods', to='paranuara.Food')),
                ('friends', models.ManyToManyField(blank=True, to='paranuara.Person')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
    ]
