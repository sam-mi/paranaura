upstream paranuara_challenge_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).
    
    server 127.0.0.1:8001 fail_timeout=0;
    # server unix:/var/www/paranaura.com/run/paranuara_challenge.gunicorn.sock fail_timeout=0;
    
}

# Basic HTTP Server for letsencrypt and HTTPS redirect.
server {
    listen                50.116.11.196:80;
    server_name           paranaura.com www.paranaura.com;
    root /var/www/paranaura.com/paranuara_challenge;

    # dont expose .env if https fails and http is active for a time.
    location /.env {
        return 404;
    }
    # Deny illegal host headers
    if ($host !~* ^(paranaura.com|www.paranaura.com)$ ) {
       return 444;
    }

    # Letsencrypt common
    include /etc/nginx/snippets/letsencrypt-acme-challenge.conf;

    location / {
        return 301 https://$host$request_uri;
    }
}

# Secure Application Server
server {

    access_log /var/www/paranaura.com/logs/nginx_access.log;
    error_log /var/www/paranaura.com/logs/nginx_error.log warn;

    # Uncomment once letsencrypt has been intialised
#   ssl on;
#   listen 50.116.11.196:443 ssl;
#   server_name paranaura.com www.paranaura.com;
    keepalive_timeout  70;

#   ssl_certificate  	/etc/letsencrypt/live/paranaura.com/fullchain.pem;
#   ssl_certificate_key  /etc/letsencrypt/live/paranaura.com/privkey.pem;

    # Uncomment to enable "basic" HTTP authentication.
#   auth_basic "paranuara_challenge";
#   auth_basic_user_file /var/www/paranaura.com/etc/.htpasswd;

    # Deny illegal host headers
    if ($host !~* ^(paranaura.com|www.paranaura.com)$ ) {
       return 444;
    }

    # Maximum request body size (upload limit).
    client_max_body_size 8M;

    # Static Files and Media locations
    location /static/ {
        alias /var/www/paranaura.com/paranuara_challenge/staticfiles/;
    }
    location /media/ {
        alias /var/www/paranaura.com/paranuara_challenge/paranuara_challenge/media/;
    }

    location / {
    # location ~*.*\.(3gp|gif|jpg|jpeg|png|ico|wmv|avi|asf|asx|mpg|mpeg|mp4|pls|mp3|mid|wav|swf|flv|html|htm|txt|js|css|exe|zip|tar|rar|gz|tgz|bz2|uha|7z|doc|docx|xls|xlsx|pdf|iso)$ {


        # Let the backend server set expires headers.
#		expires off;
#       expires 1M;

        # Apply rate limit to backend server requests.
#		limit_req zone=paranuara_challenge burst=10;

        # an HTTP header important enough to have its own Wikipedia entry:
#       http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://paranuara_challenge_server;
        proxy_redirect off;

        proxy_set_header XForwarded-For         $proxy_add_x_forwarded_for;
        proxy_set_header Host                   $host;
        proxy_set_header X-Forwarded-Protocol   $scheme;
        proxy_set_header X-Real-IP	            $remote_addr;
        proxy_set_header X-Forwarded-Proto      https;

    }
}
